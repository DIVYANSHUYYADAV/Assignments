Assignment-7

Create class Account having member id, name , balance.
Id autoincrement write read only property
Write getter setter for name and balance.
Balance can be modified only by child class.
This has virtual withdraw method which will 0.
It has deposit method.
Create two child class current and saving and override withdraw method. 
Create reference of Account class and point to saving account
and  current account. Using parentâ€™s reference call withdraw method and deposit method.
Use ToString method to display status of the object [id name balance]


using System;
namespace ConsoleApp5
{
    class Account
    {
        private static int id;
        private string name;
        protected double balance;
        public Account(String name, double balance)
        {
            Name = name;
            Balance = balance;   
         id = ++id;
        }
        public string Name
        {
            get { return name; }
            set { name = value; }
        }
        public double Balance
        {
            get { return balance; }
            protected set
            {
                if (value > 50000)
                {
                    throw new Exception("Enter a valid amount");
                }
                else
                {
                    balance = value;
                }
            }
        }

        public virtual double withdraw(double amt)
        {
            return 0;
        }
        public override string ToString()
        {
            return string.Format("Name of Acc Holder: {0} \n id:{1} \n  Current Balance: {2}", name, id, balance);
        }
        public virtual double deposit(double amt)
        {
            return 0;
        }
    }

    class current : Account
    {
        public current(string name, double balance) : base(name, balance) { }
        public override double withdraw(double amt)
        {
            if (amt > balance)
            {
                throw new Exception("you dont have enough amount in your account");
            }
            else
            {
                Console.WriteLine("Amount withdraw" + amt);
                balance = balance - amt;
               //double b = balance - amt;
                return balance;
            }
        }
        public override double deposit(double amt)
        {
            Console.WriteLine("Amount deposited" + amt);
            balance=balance + amt;
            return balance;
        }
    }
    class saving : Account
    {
        public saving(string name, double balance) : base(name, balance) { }
        public override double withdraw(double amt)
        {
            if (amt > balance)
            {
                throw new Exception("you dont have enough amount in your account");
            }
              else
                if (balance < 1000)
                  {
                   throw new Exception("amont is less than 1000");
                    }
            else
            {
                Console.WriteLine("Amount withdraw" + amt);
                balance = balance - amt;
               // double b = balance - amt;
                return balance;
            }
        }
        public override double deposit(double amt)
        {
            Console.WriteLine("Amount deposited" + amt);
            balance += amt;
            return balance ;
        }
    }
}


class Main1
   {
   static void Main(string[] args)
       {
           Account a1=null;
           try
           {
                a1 = new current("DIVYANSHU", 40000);
           } catch (Exception ex)
           {
               Console.WriteLine(ex.Message);
           }
           Console.WriteLine("new balance is"+a1.deposit(10000));
           try
           {
               Console.WriteLine("new balance is" + a1.withdraw(20000));
           }catch (Exception ex) { 
           Console.WriteLine(ex.Message);
           }
           Console.WriteLine(a1.ToString());

           Account a2 = null;
           try
           {
               a2 = new saving("Suyash", 55000);
           }
           catch (Exception ex)
           {
               Console.WriteLine(ex.Message);
           }
           Console.WriteLine("new balance is" + a2.deposit(15000));
           try
           {
               Console.WriteLine("new balance is" + a2.withdraw(27000));
           }
           catch (Exception ex)
           {
               Console.WriteLine(ex.Message);
           }
           
           Console.WriteLine(a2.ToString());
          


       }
   
   }

----------------------------------------------------------------------------------------------------------------

Ques 2-
  Create abstract class account having member id. name, balance
Id is generated by application It is readonly property for ID.
It has abstract method public abstract void withdraw(double amt);
It has static method public static double payint(); which will return interest and increase balance if account holder has positive balance
It has deposit method which will increase the balance.
Write getter setter for name 
Balance can be set only by child class.
It has static double int_rate=0.07
Create two child class Saving, Current
Initialise data by calling parentclass constructor
In saving account maintain minimum balance 1000 for this declare
Const double minbal=1000
In current account negative balance allowed.
Let both child class override withdraw method.
Create array of account class and store 2 object of saving account and current account.
Do the transaction. When you load it should print name of bank


using System;
namespace ConsoleApp5
{
    abstract class Account
    {
        static int id;
          string name;
          static double  balance;
        private static double intrst = 0.07;

        static Account()
        {
            Console.WriteLine("Bank of Divyanshu");
        }
        protected Account(string name,double balance) {
            Name = name;
            Balance = balance;
            id++;
            
        
        }
    public string Name
        {
            get { return name; }
            set { name = value; }
        }
        public double Balance
        {
            get { return balance; }
             protected set { balance = value; }
        }
        public abstract double withdraw(double amt);
        private static double intrt()
        {
            if (balance > 0)
            {
                double b = balance * intrst;
                balance = b + balance;
                return balance;
            }
            else
            {
                return 0;
            }

        }
        public double deposit(double amt)
        {
            balance = balance + amt;
            return balance;
        }

        public override string ToString()
        {
            return string.Format("NAME is {0} \n ID {1} \n Current Balance {2}",name,id,balance);
        }

    }
    class saving : Account
    {
        const double minbal = 1000;
       public saving(string name,double balance) : base(name, balance) {
        if(balance < minbal)
            {
                throw new ArgumentException("balance is low than minbalance");
            }

        }
        public override double withdraw(double amt)
        {
            Balance= Balance - amt;
            return Balance;
        }
    }
    class current : Account
    {
       public current(string name,double balance) : base(name, balance) { 
        if(balance < 0)
            {
                Console.WriteLine("Allowed");
            }
        }
        public override double withdraw(double amt)
        {
            if (Balance < amt)
            {
                Console.WriteLine("Cant deduct low balance");
                return Balance;
            }
            else
            {
                Balance = Balance - amt;
                return Balance;
            }
        }
    }


}


class Main1
   {
   static void Main(string[] args)
       {

           Account[] arr = new Account[2];
           arr[0] = new saving("Divyanshu",30000);
           arr[1] = new current("Parag",2000);
           foreach (Account i in arr) {
           Console.WriteLine(i.ToString());
               if (i is saving)
               {
                   Console.WriteLine("After deposting"+i.deposit(2000));
                   Console.WriteLine("After deducting"+i.withdraw(1400));
                   Console.WriteLine(i.ToString());
               }
               else
               if (i is current)
               {
                   Console.WriteLine("After deposting" + i.deposit(6000));
                   Console.WriteLine("After deducting" + i.withdraw(4000));
                   Console.WriteLine(i.ToString());
               }
           }

       }
   
   }











