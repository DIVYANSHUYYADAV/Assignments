Notes(HiberNate)-09-12-2023

                          *******Three Kinds of Objects********

===========================================================================================================================================================
Refresh Demo
============
Maven Dependencies
=====
    <properties>
         <hibernate.version>6.2.3.Final</hibernate.version>
    </properties> 
   <dependencies>
  <dependency>
    <groupId>org.hibernate.orm</groupId>
    <artifactId>hibernate-core</artifactId>
    <version>${hibernate.version}</version>
</dependency>
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.29</version>
    <scope>runtime</scope>
</dependency>
<dependency>
    <groupId>jakarta.persistence</groupId>
    <artifactId>jakarta.persistence-api</artifactId>
    <version>3.1.0</version>
</dependency>
  </dependencies>
=========================================================================
hibernate.cfg.xml
==================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
<property name="show_sql">true</property>
        <property name="hibernate.connection.driver_class">com.mysql.cj.jdbc.Driver</property>
        <property name="hibernate.connection.password">test@123</property>
        <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/bit</property>
        <property name="hibernate.connection.username">root</property>
        <property name="hibernate.dialect">org.hibernate.dialect.MySQLDialect</property>
        <property name="hibernate.hbm2ddl.auto">update</property>
        <mapping class="mypack.Product"/> 
    </session-factory>
</hibernate-configuration>
=============================================================================
Product.Java
===========
package mypack;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

// Generated Jun 11, 2013 10:42:01 AM by Hibernate Tools 3.2.2.GA



/**
 * Product generated by hbm2java
 */
@Entity
@Table(name = "Product")
public class Product  {

	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return "Product [name=" + name + ", qty=" + qty + ", price=" + price
				+ "]";
	}

	private int id;
	private String name;
	private int qty;
	private double price;

	public Product() {
	}

	public Product(int id) {
		this.id = id;
	}

	public Product(int id, String name, int qty, double price) {
		this.id = id;
		this.name = name;
		this.qty = qty;
		this.price = price;
	}

	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	@Column(name = "id", nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@Column(name = "name")
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "qty")
	public int getQty() {
		return this.qty;
	}

	public void setQty(int qty) {
		this.qty = qty;
	}

	@Column(name = "price")
	public double getPrice() {
		return this.price;
	}

	public void setPrice(double price) {
		this.price = price;
	}

}
==========================================================
Main.java
==========
package mypack;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.*;
import java.util.*;
public class Main 
{
	public static void main(String[] args) 
	{
		Configuration cfg=new Configuration();		
		cfg.configure("hibernate.cfg.xml");
		SessionFactory factory=cfg.buildSessionFactory();
		Session session=factory.openSession();
		Transaction tr=session.beginTransaction();
            Product p=new Product();
          
            p.setName("soap");
            p.setQty(75);
            p.setPrice(90);
        
            //session.save(p);       deprecated in Hibernate 6
            session.persist(p);
            tr.commit(); 
           
            Scanner sc=new Scanner(System.in);
            System.out.println(sc.nextInt()); // go and change the row
// e.g
// mysql> update product set price=200 where id=1;
            System.out.println("Before refresh\t"+p);
            session.refresh(p);
            System.out.println("After refresh\t"+p);
            factory.close();
 
}

}
============================================================================================================================================================
Merge Demo
==========
Main.Java
===============
  package mypack;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.*;
import java.util.*;
public class Main 
{
	public static void main(String[] args) 
	{
		Configuration cfg=new Configuration();		
		cfg.configure("hibernate.cfg.xml");
		SessionFactory factory=cfg.buildSessionFactory();
		Session session=factory.openSession();
		Transaction tr=session.beginTransaction();
        Product p=new Product();
        p.setName("soap");
        p.setQty(75);
        p.setPrice(90);
        session.persist(p);      
        tr.commit(); 
        session.close();
        System.out.println("before changing qty\t"+p);
        p.setQty(150); // detached
        System.out.println("after changing qty\t"+p);
        Scanner sc=new Scanner(System.in);      -(1)
        System.out.println(sc.nextInt()); // go and check the database, u wont find changes
        session=factory.openSession();
        tr=session.beginTransaction();
        //session.update(p);  deprecated in Hibernate 6
        /* merge() will retrieve the record from database
         * and match it with the instance on the heap
         * if there is a difference (we might have changed the 
         * value of one of the fields) then only it will 
         * fire update query
         */
        session.merge(p); //reassociate detached entity with a new session
        tr.commit(); 
        session.close();
        factory.close();

	}
}


 select * from product;
+----+------+-------+------+
| id | name | price | qty  |
+----+------+-------+------+
|  1 | soap |    90 |   75 |
+----+------+-------+------+
1 row in set (0.00 sec)


before execution of scanner there will no changes in the database 
after execution of Syso u can see changes in DB
============================================================================================================================================================
Dirty-Check Demo
================
Main.java
=========
package mypack;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.*;
import java.util.*;
public class Main 
{
	public static void main(String[] args) 
	{
		Configuration cfg=new Configuration();		
		cfg.configure("hibernate.cfg.xml");
		SessionFactory factory=cfg.buildSessionFactory();
		Session session=factory.openSession();
		Transaction tr=session.beginTransaction();
            Product p=new Product();
            p.setName("soap");
            p.setQty(75);
            p.setPrice(90);
        
            session.persist(p);      
            tr.commit(); 
           
            Scanner sc=new Scanner(System.in);
            System.out.println(sc.nextInt()); // go and check in database

            tr=session.beginTransaction();
            p.setPrice(190); // if u change this then only hibernate will fire update query on commit
            tr.commit();
            session.close();
            factory.close();
}
}
============================================================================================================================================================